module c_seq_gen_control (
    input clk,
    input rst,

    input i_start,  //! Start a new sequence generation with provied initial value
    input i_get,    //! Manually retrieve the next byte when the generated byte count exceeds the threshold; otherwise, the module generates it automatically

    input [30:0] i_init,      //! Initial value
    input [15:0] i_threshold, //! The threshold byte index that this module need to auto generate

    output [7:0] o_gen_byte,  //! Output byte of the sequence
    output       o_gen_done,
    output       o_valid
);

  reg [15:0] byte_count;
  reg [15:0] get_count;
  wire gen_done = (byte_count > i_threshold);
  assign o_gen_done = gen_done;

  always @(posedge clk, posedge rst) begin
    if (rst) begin

    end else begin
      if (i_start) begin
        byte_count <= 0;
        get_count <= 0;
      end else begin
        if (gen_done) begin
        //   if (i_get) byte_count <= byte_count + 1;  // manual gen
        end else begin
          byte_count <= byte_count + 1;  // auto gen
        end
      end

      if(o_valid) get_count <= get_count + 1;
    end
  end


  wire c_seq_gen_en = (i_get || (!gen_done));
  wire c_seq_gen_load = i_start;
  wire c_seq_gen_valid;

  localparam nGenBit = 8;
  c_seq_gen #(
      .nGenBit(nGenBit)
  ) c_seq_gen_dut (
      .clk(clk),
      .rst(rst),

      .i_en  (c_seq_gen_en),
      .i_load(c_seq_gen_load),
      .i_init(i_init),

      .o_seq_bit(o_gen_byte),
      .o_valid  (c_seq_gen_valid)
  );

  assign o_valid = c_seq_gen_valid && gen_done;


endmodule
